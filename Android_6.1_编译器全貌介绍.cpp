/*
·第一段叫前端（Frontend）：其输入为源代码，输出为中间表示（Intermediate Representation，简写为IR，
    IR也被称作中间代码、中间语言）。IR没有标准语法。各编译器都可以自定义IR。
    比如LLVM就有LLVM IR，【而Java字节码也是一种IR。】
    前端的工作主要是解析输入的源码，并对其进行词法分析、语法分析、语义分析、生成对应的IR等。


·第二段叫优化器（Optimizer）。优化器的输入是未优化的IR，输出是优化后的IR。
    常用的优化手段有循环优化、常量传播和折叠、无用代码消除、方法内联优化等。
    另外，优化器在优化阶段的最后还要执行一项非常重要的工作，即考虑如何分配物理寄存器。
    比如，IR中往往使用不限个数的虚拟寄存器，而目标机器的物理寄存器的个数却是有限的。
    所以优化器需要有一种方法来合理分配物理寄存器。而对那些不能保存在物理寄存器中的值，
    优化器还需要生成将这些值存储到内存、从内存中读取它们的指令。


·最后一段叫后端（Backend）。其输入为优化后的IR，输出为目标机器的机器码。后端的主要功能是将IR翻译成机器码。



LLVM不包括Frontend。 (p195)

对ART虚拟机而言，其编译模块没有包含Frontend，
因为从Java源代码到Dex字节码的前端工作是在APP开发过程中由Java编译器、dex工具完成的 (p195)

ART虚拟机中的编译器只包括优化器和后端，优化器的输入是dex字节码，其输出是ART定义的HInstruction。
*/